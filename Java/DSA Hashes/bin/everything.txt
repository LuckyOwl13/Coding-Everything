::::::::::::::
Driver.java
::::::::::::::
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Driver {
    /** Reader used to receive input**/
    private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    public static void main(String[] args) throws NumberFormatException, IOException {

        HashTable<String,String> table = new HashTable<String,String>();

        printMenu(table);
    }	// end main

    private static void printMenu(HashTable<String, String> table) throws NumberFormatException, IOException {
        boolean endNow = false;
        do {
            System.out.print("\nSelect from the following menu:"
                             + "\n\t1. Insert a symbol key with an associated value in the table."
                             + "\n\t2. Delete a symbol from the table."
                             + "\n\t3. Retrieve and display the value associated with a symbol key in the table."
                             + "\n\t4. Display the hash index of a symbol key."
                             + "\n\t5. Exit program."
                             + "\nMake you menu selection now: ");

            int select = Integer.parseInt(br.readLine().trim());
            System.out.println(select);

            switch (select) {
            case 1:
                insertItem(table);
                break;
            case 2:
                deleteItem(table);
                break;
            case 3:
                retrieveValue(table);
                break;
            case 4:
                displayHash(table);
                break;
            case 5:
                endNow = true;
                break;
            default:
                System.out.println("Error, please use valid input");
                break;
            }

        } while (!endNow);	// end do-while

        System.out.println("Exitting now... Goodbye");
        System.exit(0);
    }	// end printMenu

    // #1
    private static void insertItem(HashTable<String, String> table) throws IOException {
        System.out.print("You are now inserting a key/value pair into the table."
                         + "\n\tEnter symbol key: ");
        String key = br.readLine();
        System.out.println(key);

        System.out.print("\tEnter associated value: ");
        String value = br.readLine();
        System.out.println(value);

        table.tableInsert(key, value);
        System.out.println("\nKey " + key + " with value " + value + " inserted into the table.");

    }	// end insertItem

    // #2
    private static void deleteItem(HashTable<String, String> table) throws IOException {
        if (table.tableIsEmpty()) {
            System.out.println("Table empty, cannot delete!");
        }	// end if
        else {
            System.out.print("You are now deleting a key/value pair from the table."
                             + "\n\tEnter search key: ");
            String key = br.readLine();
            System.out.println(key);

            if (table.tableDelete(key)) {
                System.out.println("Value associated with key " + key + " deleted successfully.");
            }	// end if
            else {
                System.out.println("No key matching input found.");
            }	// end else
        }	// end else
    }	// end deleteItem

    // #3
    private static void retrieveValue(HashTable<String, String> table) throws IOException {
        if (table.tableIsEmpty()) {
            System.out.println("Table empty, cannot retrieve!");
        }	// end if
        else {
            System.out.print("You are now retrieving a value from the table."
                             + "\n\tEnter search key: ");
            String key = br.readLine();
            System.out.println(key);

            String value = table.tableRetrieve(key);

            if (value != null) {
                System.out.println("Value '" + value + "' retrieved.");
            }	// end if
            else {
                System.out.println("No key matching input found.");
            }	// end else
        }	// end else
    }	// end retrieveValue

    // #4
    private static void displayHash(HashTable<String, String> table) throws IOException {
        System.out.print("You are now seeing the value for a symbol key."
                         + "\n\tEnter symbol key: ");
        String key = br.readLine();
        System.out.println(key);

        System.out.printf("The hash index of '%s' is '%s'\n",key,table.hashIndex(key));
    }	// end displayHash
}	// end Class













































::::::::::::::
HashTable.java
::::::::::::::
// ********************************************************
// Hash table implementation.
// Assumption: A table contains unique items(at most one
//             item with a given search key at any time)
// *********************************************************

public class HashTable<K, V> implements HashTableInterface<K,V> {
    private ChainNode<K, V>[] table;     // hash table
    private int size = 0;          // size of ADT table

    @SuppressWarnings("unchecked")
    public HashTable() {
        table = new ChainNode[3];
    }  // end default constructor

    // table operations
    public boolean tableIsEmpty() {
        return size==0;
    }  // end tableIsEmpty

    public int tableLength() {
        return size;
    }  // end tableLength


    //implement the following 4 methods
    @Override
    public void tableInsert(K key, V value) throws HashException {
        int index = hashIndex(key);

        ChainNode<K,V> wasThere = table[index];
        table[index] = new ChainNode<K,V>(key,value,wasThere);

        size++;
    }	// end tableInsert


    public boolean tableDelete(K searchKey)	{
        int index = hashIndex(searchKey);
        boolean found = false;

        ChainNode<K,V> current = table[index];
        ChainNode<K,V> previous = null;

        if (current != null && current.getKey().equals(searchKey)) {
            table[index] = current.getNext();
            found = true;
            size--;
        }	// end if
        else {
            previous = current;
            current = current.getNext();

            while (current != null && !found) {
                previous = current;
                current = current.getNext();

                if (current.getKey().equals(searchKey)) {
                    found = true;
                    previous.setNext(current.getNext());
                    size--;
                }	// end if
                else {
                    previous = current;
                    current = current.getNext();
                }	// end else
            }	// end while
        }	// end else

        return found;
    }	// end tableDelete


    public V tableRetrieve(K searchKey)	{
        int index = hashIndex(searchKey);
        boolean found = false;
        V toReturn = null;

        if (tableIsEmpty()) {
            System.out.println("Table is empty, cannot retrieve!");
        }	// end if
        else {
            for (ChainNode<K,V> current = table[index]; current != null && !found; current = current.getNext()) {
                if (current.getKey().equals(searchKey)) {
                    found = true;
                    toReturn = current.getValue();
                }	// end if
            }	// end while
        }	// end else
        return toReturn;
    }	// end tableRetrieve


    public int hashIndex(K key)	{
        int hashed = 0;	// the hash value for the input key

        char[] keyInput = key.toString().toCharArray();

        for (int i = 0; i < keyInput.length; i++) {

            hashed += (Character.compare(keyInput[i], 'A') + 1) << 5*i;	// map each character to the corresponding integer

        }	// end for

        hashed = hashed % table.length;

        return hashed;
    }	// end hashIndex
}  // end HashTable
::::::::::::::
Minput.txt
::::::::::::::
2
3
1
ASDF
hi
1
FGHFD
hello
1
QQQQQQ
how ya doin
2
FFFEES
3
QWERTY
3
FGHFD
2
QQQQQQ
3
QQQQQQ
4
ASDF
4
FGHFD
4
QQQQQQ
4
QWERTY
5
::::::::::::::
Moutput.txt
::::::::::::::

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 2
Table empty, cannot delete!

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 3
Table empty, cannot retrieve!

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 1
You are now inserting a key/value pair into the table.
	Enter symbol key: ASDF
	Enter associated value: hi

Key ASDF with value hi inserted into the table.

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 1
You are now inserting a key/value pair into the table.
	Enter symbol key: FGHFD
	Enter associated value: hello

Key FGHFD with value hello inserted into the table.

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 1
You are now inserting a key/value pair into the table.
	Enter symbol key: QQQQQQ
	Enter associated value: how ya doin

Key QQQQQQ with value how ya doin inserted into the table.

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 2
You are now deleting a key/value pair from the table.
	Enter search key: FFFEES
No key matching input found.

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 3
You are now retrieving a value from the table.
	Enter search key: QWERTY
No key matching input found.

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 3
You are now retrieving a value from the table.
	Enter search key: FGHFD
Value 'hello' retrieved.

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 2
You are now deleting a key/value pair from the table.
	Enter search key: QQQQQQ
Value associated with key QQQQQQ deleted successfully.

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 3
You are now retrieving a value from the table.
	Enter search key: QQQQQQ
No key matching input found.

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 4
You are now seeing the value for a symbol key.
	Enter symbol key: ASDF
The hash index of 'ASDF' is '1'

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 4
You are now seeing the value for a symbol key.
	Enter symbol key: FGHFD
The hash index of 'FGHFD' is '2'

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 4
You are now seeing the value for a symbol key.
	Enter symbol key: QQQQQQ
The hash index of 'QQQQQQ' is '0'

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 4
You are now seeing the value for a symbol key.
	Enter symbol key: QWERTY
The hash index of 'QWERTY' is '0'

Select from the following menu:
	1. Insert a symbol key with an associated value in the table.
	2. Delete a symbol from the table.
	3. Retrieve and display the value associated with a symbol key in the table.
	4. Display the hash index of a symbol key.
	5. Exit program.
Make you menu selection now: 5
Exitting now... Goodbye
