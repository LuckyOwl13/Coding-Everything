::::::::::::::
Driver.java
::::::::::::::
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Driver {
    /** Reader used to receive input**/
    private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    public static void main(String[] args) throws NumberFormatException, IOException {
        printMenu();
    }	// end main

    private static void printMenu() throws NumberFormatException, IOException {
        boolean endNow = false;
        do {
            System.out.print("\nSelect from the following menu:"
                             + "\n\t1. Iterative MergeSort."
                             + "\n\t2. Resursive QuickSort."
                             + "\n\t3. Exit program."
                             + "\nMake you menu selection now: ");

            int select = Integer.parseInt(br.readLine().trim());
            System.out.println(select);

            switch (select) {
            case 1:
                System.out.println("Merge Sort");
                break;
            case 2:
                System.out.println("Quick Sort");
                break;
            case 3:
                System.out.println("Exitting now... Goodbye");
                endNow = true;
                break;
            default:
                System.out.println("Error, please use valid input");
                break;
            }

            if (select >= 1 && select <= 2) {
                System.out.print("Enter number of integers: ");
                int numInt = Integer.parseInt(br.readLine());
                System.out.println(numInt);

                int[] list = new int[numInt];			// make array to hold input

                for (int i = 0; i < numInt; i++) {		// load up new array
                    System.out.printf("Enter integer number %s: ",i + 1);
                    list[i] = Integer.parseInt(br.readLine());
                    System.out.println(list[i]);
                }	// end for

                System.out.println("Input data:");
                for (int i : list) {
                    System.out.print(i + "   ");
                }

                System.out.println("\nSorted data:");

                int[] results = new int[numInt];

                switch (select) {
                case 1:
                    results = mergeSort(list);
                    break;
                case 2:
                    results = quickSort(list);
                    break;
                }	// end switch


                for (int i = 0; i < numInt; i++) {		// load up new array
                    System.out.print(results[i] + "   ");
                }	// end for
                System.out.println("\nNumber of comparisons: " + results[numInt]);
            }	// end if

        } while (!endNow);	// end do-while

        System.exit(0);
    }	// end printMenu


    private static int[] mergeSort(int[] list) {
        int n = list.length - 1;
        int [] sorted = new int[n + 2];	// bigger than list so can fit comparison count
        int compCount = 0;	// number of compares to sort

        for (int size = 1; size <= n;) {			// size is how many items are in each "subarray"
            for (int j = 0; j < n/size; j += 2) {	// j is which subarray is being used (s0, s1...)

                int[] first = new int[size];	// array for the first subarray
                int[] second = new int[size];	// array for the second subarray
                int secondEnd = Integer.MAX_VALUE;	// catcher to prevent ArrayIndexOutOfBoundsExceptions
                try {
                    for (int i = 0; i < size; i++) {	// fill first with appropriate values
                        first[i] = list[i + j*size];
                    }	// end for
                    for (int i = size; i < size*2; i++) { // fill second with appropriate values
                        secondEnd = i - size + 1;
                        second[i - size] = list[i + j*size];
                    }	// end for
                    secondEnd = Integer.MAX_VALUE;	// reset catcher
                } catch (ArrayIndexOutOfBoundsException e) {	// try-catch so that can handle arrays of not powers of 2
                    secondEnd -= 2;
                };	// end try-catch

                int fir = 0;	// respective indexes for first and second
                int sec = 0;

                do {		// compare values at indexes, slowly add them in
                    if (first[fir] < second[sec]) {
                        list[fir + sec + j*size] = first[fir];	// first's value smaller, sorted first
                        fir++;	// move to next item in first
                    }	// end if
                    else {
                        list[fir + sec + j*size] = second[sec];	// second's value smaller, sorted first
                        ++sec;	// move to next item in second
                        if (sec > secondEnd) {
                            sec = second.length;
                        }	// end if
                    }	// end else

                    compCount++;	// add another comparison to the counter
                } while (fir < first.length && sec < second.length);	// end do-while

                if (sec >= secondEnd) {	// if secondEnd was used
                    sec = secondEnd + 1;				// return sec to what it should be
                }	// end if

                while (fir < first.length) {		// load any extras still in first back into list
                    list[fir + sec + j*size] = first[fir];	// first's value smaller, sorted first
                    fir++;	// move to next item in first
                }	// end while
                while (sec < second.length && secondEnd == Integer.MAX_VALUE) {	// load any extras still in second back into list
                    list[fir + sec + j*size] = second[sec];	// second's value smaller, sorted first
                    sec++;	// move to next item in second
                }	// end while
            }	// end for

            size *= 2;	// merge arrays together
        }	// end for



        for (int i = 0; i <= n; i ++) {	// transfer list into sorted
            sorted[i] = list[i];
        }	// end for
        sorted[sorted.length - 1] = compCount;	// number of comparisons put into sorted

        return sorted;
    }	// end mergeSort



    private static int[] quickSort(int[] list) {
        int n = list.length - 1;
        int [] sorted = new int[n + 2];	// bigger than list so can fit comparison count
        int p; 			// value used for partition
        int compCount = 0;	// number of compares to sort
        int low = 1;			// mark the last index in the <p or >p sets, respectively


        if (list.length >= 3) {
            int first = list[0];	// first item in collection
            int last = list[n];	// last item in collection
            int middle = list[n/2];	// middle item in collection

            // increments the count of comparisons for each comparison, has to do it twice
            // for every part of both if statements that is evaluated. Looks great don't it
            if (middle > first && first > last) {
                p = first;	// first is the median
                compCount += 2; // compared 2 times to get here
            }
            else if (last > first && first > middle) {
                p = first;	// first is the median
                compCount += 4; // compared 4 times to get here
            }	// end if
            else if (first > last && last > middle) {
                p = last;	// last is the median
                list[n] = list[0];
                list[0] = p;
                compCount += 6; // compared 6 times to get here
            }
            else if (middle > last && last > first) {
                p = last;	// last is the median
                list[n] = list[0];
                list[0] = p;
                compCount += 8; // compared 8 times to get here
            }	// end else-if
            else {
                p = middle;	// middle is the median
                list[n/2] = list[0];
                list[0] = p;
                compCount += 8;	// compared 8 times to get here
            }	// end else

            // moving on to partitioning
            for (int i = 1; i <= n; i++) {
                if (list[i] < p) {
                    int temp = list[low];	// swap current with first greater item
                    list[low] = list[i];
                    list[i] = temp;
                    low++;
                }	// end if
                compCount++;
            }	// end for

            list[0] = list[low - 1];	// swap last <p item with p
            list[low - 1] = p;

            int[] lower = new int[low - 1];						// initialize array to pass for <p
            int[] higher = new int[list.length - low];	// initialize array to pass for >p

            for (int i = 0; i < low - 1; i++) {	// fill lower with appropriate values
                lower[i] = list[i];
            }	// end for
            for (int i = low; i <= n; i++) {	// fill higher with appropriate values
                higher[i - low] = list[i];
            }	// end for

            lower = quickSort(lower);	// recursively sort <p
            higher = quickSort(higher);	// recursively sort <p

            for (int i = 0; i < lower.length - 1; i++) {		// insert sorted <p values to appropriate spots
                list[i] = lower[i];
            }	// end for
            for (int i = 0; i < higher.length - 1; i++) {	// insert sorted >p values to appropriate spots
                list[i + low] = higher[i];
            }	// end for

            compCount += lower[lower.length - 1];	// add deeper-level comparison counts to running count
            compCount += higher[higher.length - 1];

        }	// end if
        else {	// base case, <= 2 items in group
            if (list.length > 1 && list[0] > list[1]) {
                int temp = list[0];
                list[0] = list[1];
                list[1] = temp;
            }
            compCount++;
        }	// end else, base case


        for (int i = 0; i <= n; i ++) {				// transfer list into sorted
            sorted[i] = list[i];
        }	// end for
        sorted[sorted.length - 1] = compCount;	// number of comparisons

        return sorted;
    }	// end quickSort
}	// end Driver
::::::::::::::
Minput.txt
::::::::::::::
1
7
-11
-6
2
3
5
27
45
1
7
45
27
5
3
2
-6
-11
1
7
5
2
27
45
-11
-6
3
2
7
-11
-6
2
3
5
27
45
2
7
45
27
5
3
2
-6
-11
2
7
5
2
27
45
-11
-6
3
3
::::::::::::::
Moutput.txt
::::::::::::::

Select from the following menu:
	1. Iterative MergeSort.
	2. Resursive QuickSort.
	3. Exit program.
Make you menu selection now: 1
Merge Sort
Enter number of integers: 7
Enter integer number 1: -11
Enter integer number 2: -6
Enter integer number 3: 2
Enter integer number 4: 3
Enter integer number 5: 5
Enter integer number 6: 27
Enter integer number 7: 45
Input data:
-11   -6   2   3   5   27   45   
Sorted data:
-11   -6   2   3   5   27   45   
Number of comparisons: 11

Select from the following menu:
	1. Iterative MergeSort.
	2. Resursive QuickSort.
	3. Exit program.
Make you menu selection now: 1
Merge Sort
Enter number of integers: 7
Enter integer number 1: 45
Enter integer number 2: 27
Enter integer number 3: 5
Enter integer number 4: 3
Enter integer number 5: 2
Enter integer number 6: -6
Enter integer number 7: -11
Input data:
45   27   5   3   2   -6   -11   
Sorted data:
-11   -6   2   3   5   27   45   
Number of comparisons: 9

Select from the following menu:
	1. Iterative MergeSort.
	2. Resursive QuickSort.
	3. Exit program.
Make you menu selection now: 1
Merge Sort
Enter number of integers: 7
Enter integer number 1: 5
Enter integer number 2: 2
Enter integer number 3: 27
Enter integer number 4: 45
Enter integer number 5: -11
Enter integer number 6: -6
Enter integer number 7: 3
Input data:
5   2   27   45   -11   -6   3   
Sorted data:
-11   -6   2   3   5   27   45   
Number of comparisons: 11

Select from the following menu:
	1. Iterative MergeSort.
	2. Resursive QuickSort.
	3. Exit program.
Make you menu selection now: 2
Quick Sort
Enter number of integers: 7
Enter integer number 1: -11
Enter integer number 2: -6
Enter integer number 3: 2
Enter integer number 4: 3
Enter integer number 5: 5
Enter integer number 6: 27
Enter integer number 7: 45
Input data:
-11   -6   2   3   5   27   45   
Sorted data:
-11   -6   2   3   5   27   45   
Number of comparisons: 38

Select from the following menu:
	1. Iterative MergeSort.
	2. Resursive QuickSort.
	3. Exit program.
Make you menu selection now: 2
Quick Sort
Enter number of integers: 7
Enter integer number 1: 45
Enter integer number 2: 27
Enter integer number 3: 5
Enter integer number 4: 3
Enter integer number 5: 2
Enter integer number 6: -6
Enter integer number 7: -11
Input data:
45   27   5   3   2   -6   -11   
Sorted data:
-11   -6   2   3   5   27   45   
Number of comparisons: 34

Select from the following menu:
	1. Iterative MergeSort.
	2. Resursive QuickSort.
	3. Exit program.
Make you menu selection now: 2
Quick Sort
Enter number of integers: 7
Enter integer number 1: 5
Enter integer number 2: 2
Enter integer number 3: 27
Enter integer number 4: 45
Enter integer number 5: -11
Enter integer number 6: -6
Enter integer number 7: 3
Input data:
5   2   27   45   -11   -6   3   
Sorted data:
-11   -6   2   3   5   27   45   
Number of comparisons: 22

Select from the following menu:
	1. Iterative MergeSort.
	2. Resursive QuickSort.
	3. Exit program.
Make you menu selection now: 3
Exitting now... Goodbye
